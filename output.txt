...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Ridge with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Lasso with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Ridge with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Lasso with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Ridge with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Lasso with transforms (<mlforecast.target_transforms.AutoDifferences object at 0x000002645CC42D80>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
CatBoostRegressor MAPE: 54.37% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
RandomForestRegressor MAPE: 49.17% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
XGBRegressor MAPE: 60.81% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000534 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1300
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 16
[LightGBM] [Info] Start training from score -0.075646
LGBMRegressor MAPE: 61.61% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
GradientBoostingRegressor MAPE: 50.90% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Ridge MAPE: 73.56% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 56.01% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 48.02% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 92.66% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000542 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1207
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 15
[LightGBM] [Info] Start training from score -0.075646
LGBMRegressor MAPE: 64.70% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 107.48% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 77.02% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 50.84% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 47.32% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 84.23% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000303 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1207
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 15
[LightGBM] [Info] Start training from score -0.075646
LGBMRegressor MAPE: 63.22% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 132.51% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 71.41% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 67.32% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 74.21% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 77.95% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000593 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1116
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 14
[LightGBM] [Info] Start training from score -0.075646
LGBMRegressor MAPE: 60.93% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 95.62% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 73.43% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
CatBoostRegressor MAPE: 55.26% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
RandomForestRegressor MAPE: 48.70% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
XGBRegressor MAPE: 63.37% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000520 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1025
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 13
[LightGBM] [Info] Start training from score -0.075646
LGBMRegressor MAPE: 58.06% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
GradientBoostingRegressor MAPE: 54.37% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Ridge MAPE: 73.78% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
CatBoostRegressor MAPE: 53.51% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
RandomForestRegressor MAPE: 48.74% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
XGBRegressor MAPE: 65.34% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000575 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 933
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 12
[LightGBM] [Info] Start training from score -0.075646
LGBMRegressor MAPE: 57.90% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
GradientBoostingRegressor MAPE: 54.97% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Ridge MAPE: 73.45% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
CatBoostRegressor MAPE: 55.69% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
RandomForestRegressor MAPE: 55.71% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
XGBRegressor MAPE: 67.79% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000329 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1291
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 16
[LightGBM] [Info] Start training from score 0.476305
LGBMRegressor MAPE: 60.12% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
GradientBoostingRegressor MAPE: 49.02% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Ridge MAPE: 62.49% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 57.40% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 69.27% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 84.25% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000478 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1200
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 15
[LightGBM] [Info] Start training from score 0.476305
LGBMRegressor MAPE: 64.94% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 93.32% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 62.56% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 53.55% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 53.57% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 83.84% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000528 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1200
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 15
[LightGBM] [Info] Start training from score 0.476305
LGBMRegressor MAPE: 157.12% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 138.49% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 62.47% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 49.45% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 62.35% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 68.91% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000557 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1109
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 14
[LightGBM] [Info] Start training from score 0.476305
LGBMRegressor MAPE: 66.43% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 92.79% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 62.37% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
CatBoostRegressor MAPE: 55.26% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
RandomForestRegressor MAPE: 48.95% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
XGBRegressor MAPE: 62.11% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000488 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1018
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 13
[LightGBM] [Info] Start training from score 0.476305
LGBMRegressor MAPE: 61.46% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
GradientBoostingRegressor MAPE: 53.72% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Ridge MAPE: 62.37% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
CatBoostRegressor MAPE: 53.51% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
RandomForestRegressor MAPE: 48.31% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
XGBRegressor MAPE: 60.92% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000324 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 927
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 12
[LightGBM] [Info] Start training from score 0.476305
LGBMRegressor MAPE: 61.42% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
GradientBoostingRegressor MAPE: 53.76% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Ridge MAPE: 62.38% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Lasso MAPE: 47.80% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
CatBoostRegressor MAPE: 54.37% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
RandomForestRegressor MAPE: 54.99% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
XGBRegressor MAPE: 64.34% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000477 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1293
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 16
[LightGBM] [Info] Start training from score -0.546800
LGBMRegressor MAPE: 119.96% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
GradientBoostingRegressor MAPE: 55.13% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Ridge MAPE: 72.52% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Lasso MAPE: 47.66% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 56.01% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 51.77% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 92.79% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000517 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1201
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 15
[LightGBM] [Info] Start training from score -0.546800
LGBMRegressor MAPE: 63.43% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 92.19% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 76.11% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.66% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 50.84% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 50.69% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 86.49% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000467 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1201
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 15
[LightGBM] [Info] Start training from score -0.546800
LGBMRegressor MAPE: 132.61% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 136.33% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 63.98% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.66% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 67.32% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 49.19% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 75.50% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000376 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1110
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 14
[LightGBM] [Info] Start training from score -0.546800
LGBMRegressor MAPE: 62.03% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 94.08% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 70.66% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.66% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
CatBoostRegressor MAPE: 55.26% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
RandomForestRegressor MAPE: 49.13% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
XGBRegressor MAPE: 63.63% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000623 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1019
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 13
[LightGBM] [Info] Start training from score -0.546800
LGBMRegressor MAPE: 62.93% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
GradientBoostingRegressor MAPE: 54.27% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Ridge MAPE: 74.13% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Lasso MAPE: 47.66% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
CatBoostRegressor MAPE: 53.51% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
RandomForestRegressor MAPE: 47.20% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
XGBRegressor MAPE: 59.93% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000428 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 928
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 12
[LightGBM] [Info] Start training from score -0.546800
LGBMRegressor MAPE: 64.37% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
GradientBoostingRegressor MAPE: 54.75% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Ridge MAPE: 73.74% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Lasso MAPE: 47.66% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
CatBoostRegressor MAPE: 54.37% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
RandomForestRegressor MAPE: 43.83% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
XGBRegressor MAPE: 64.47% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000492 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1293
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 16
[LightGBM] [Info] Start training from score -0.281043
LGBMRegressor MAPE: 119.96% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
GradientBoostingRegressor MAPE: 55.83% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Ridge MAPE: 73.42% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Lasso MAPE: 47.79% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 56.01% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 80.84% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 92.59% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000451 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1201
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 15
[LightGBM] [Info] Start training from score -0.281043
LGBMRegressor MAPE: 63.43% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 94.54% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 77.14% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.79% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 50.84% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 47.17% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 84.47% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000515 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1201
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 15
[LightGBM] [Info] Start training from score -0.281043
LGBMRegressor MAPE: 132.61% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 136.29% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 68.88% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.79% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 67.32% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 48.74% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 78.73% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000607 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1110
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 14
[LightGBM] [Info] Start training from score -0.281043
LGBMRegressor MAPE: 62.03% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 94.82% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 73.00% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 47.79% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
CatBoostRegressor MAPE: 55.26% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
RandomForestRegressor MAPE: 49.53% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
XGBRegressor MAPE: 63.62% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000413 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1019
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 13
[LightGBM] [Info] Start training from score -0.281043
LGBMRegressor MAPE: 62.93% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
GradientBoostingRegressor MAPE: 54.47% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Ridge MAPE: 74.03% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Lasso MAPE: 47.79% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
CatBoostRegressor MAPE: 53.51% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
RandomForestRegressor MAPE: 48.39% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
XGBRegressor MAPE: 61.39% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000297 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 928
[LightGBM] [Info] Number of data points in the train set: 271, number of used features: 12
[LightGBM] [Info] Start training from score -0.281043
LGBMRegressor MAPE: 64.37% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
GradientBoostingRegressor MAPE: 53.84% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Ridge MAPE: 73.66% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Lasso MAPE: 47.79% with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC41850>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalDifferences object at 0x000002645CC41D00>, <mlforecast.target_transforms.LocalBoxCox object at 0x000002645CC40560>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Skipping combination due to error: All values in data must be positive for method='loglik'
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
CatBoostRegressor MAPE: 49.60% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
RandomForestRegressor MAPE: 214.46% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
XGBRegressor MAPE: 216.57% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000502 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2994
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 16
[LightGBM] [Info] Start training from score -0.085555
LGBMRegressor MAPE: 52.87% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
GradientBoostingRegressor MAPE: 87.29% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Ridge MAPE: 40.26% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 49.71% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 215.38% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 73.99% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000559 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2782
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 15
[LightGBM] [Info] Start training from score -0.085555
LGBMRegressor MAPE: 76.95% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 190.24% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 42.29% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 48.59% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 213.63% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 71.04% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000419 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2782
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 15
[LightGBM] [Info] Start training from score -0.085555
LGBMRegressor MAPE: 61.53% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 63.13% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 41.43% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 53.26% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 213.91% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 53.03% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000545 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2570
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 14
[LightGBM] [Info] Start training from score -0.085555
LGBMRegressor MAPE: 59.77% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 60.72% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 42.73% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
CatBoostRegressor MAPE: 50.19% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
RandomForestRegressor MAPE: 213.52% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
XGBRegressor MAPE: 66.39% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000555 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2357
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 13
[LightGBM] [Info] Start training from score -0.085555
LGBMRegressor MAPE: 76.58% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
GradientBoostingRegressor MAPE: 58.46% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Ridge MAPE: 35.78% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
CatBoostRegressor MAPE: 47.08% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
RandomForestRegressor MAPE: 83.31% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
XGBRegressor MAPE: 54.74% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000539 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2145
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 12
[LightGBM] [Info] Start training from score -0.085555
LGBMRegressor MAPE: 83.91% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
GradientBoostingRegressor MAPE: 59.89% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Ridge MAPE: 36.17% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalStandardScaler object at 0x000002645CC42B10>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
CatBoostRegressor MAPE: 49.60% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
RandomForestRegressor MAPE: 224.49% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
XGBRegressor MAPE: 215.39% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000554 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2996
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 16
[LightGBM] [Info] Start training from score 0.152369
LGBMRegressor MAPE: 74.56% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
GradientBoostingRegressor MAPE: 86.91% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Ridge MAPE: 37.42% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 49.71% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 215.43% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 199.32% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000536 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2783
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 15
[LightGBM] [Info] Start training from score 0.152369
LGBMRegressor MAPE: 85.93% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 195.20% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 39.57% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 48.59% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 68.38% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 62.68% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000542 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2783
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 15
[LightGBM] [Info] Start training from score 0.152369
LGBMRegressor MAPE: 64.59% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 62.32% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 37.85% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 53.26% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 63.11% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 50.95% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000560 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2570
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 14
[LightGBM] [Info] Start training from score 0.152369
LGBMRegressor MAPE: 69.76% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 60.70% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 39.24% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
CatBoostRegressor MAPE: 50.19% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
RandomForestRegressor MAPE: 74.19% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
XGBRegressor MAPE: 48.85% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000532 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2357
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 13
[LightGBM] [Info] Start training from score 0.152369
LGBMRegressor MAPE: 89.25% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
GradientBoostingRegressor MAPE: 58.44% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Ridge MAPE: 38.75% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
CatBoostRegressor MAPE: 47.08% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
RandomForestRegressor MAPE: 86.12% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
XGBRegressor MAPE: 54.95% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000506 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2144
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 12
[LightGBM] [Info] Start training from score 0.152369
LGBMRegressor MAPE: 90.94% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
GradientBoostingRegressor MAPE: 59.79% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Ridge MAPE: 40.05% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}...
Lasso MAPE: 132.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalMinMaxScaler object at 0x000002645CC43A40>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
CatBoostRegressor MAPE: 49.60% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
RandomForestRegressor MAPE: 224.88% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
XGBRegressor MAPE: 217.99% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000566 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2992
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 16
[LightGBM] [Info] Start training from score 0.964791
LGBMRegressor MAPE: 55.83% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
GradientBoostingRegressor MAPE: 86.71% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Ridge MAPE: 42.31% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}...
Lasso MAPE: 78.52% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>), CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 49.71% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 207.29% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 76.11% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000525 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2780
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 15
[LightGBM] [Info] Start training from score 0.964791
LGBMRegressor MAPE: 86.97% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 194.37% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 46.69% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 78.52% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)], 7: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 48.59% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 206.87% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 62.05% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000491 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2779
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 15
[LightGBM] [Info] Start training from score 0.964791
LGBMRegressor MAPE: 56.11% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 63.43% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 47.19% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 78.52% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 7: [CPUDispatcher(<function rolling_mean_30 at 0x0000026459DBC860>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
CatBoostRegressor MAPE: 53.26% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
RandomForestRegressor MAPE: 87.94% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
XGBRegressor MAPE: 51.68% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000490 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2567
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 14
[LightGBM] [Info] Start training from score 0.964791
LGBMRegressor MAPE: 62.28% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
GradientBoostingRegressor MAPE: 60.44% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Ridge MAPE: 47.02% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training Lasso with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}...
Lasso MAPE: 78.52% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)], 30: [CPUDispatcher(<function expanding_mean at 0x00000264502DFE20>)]}
Training CatBoostRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
CatBoostRegressor MAPE: 50.19% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training RandomForestRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
RandomForestRegressor MAPE: 213.26% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training XGBRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
XGBRegressor MAPE: 48.67% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training LGBMRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000401 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 2354
[LightGBM] [Info] Number of data points in the train set: 636, number of used features: 13
[LightGBM] [Info] Start training from score 0.964791
LGBMRegressor MAPE: 51.28% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training GradientBoostingRegressor with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...
GradientBoostingRegressor MAPE: 58.47% with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}
Training Ridge with transforms (<mlforecast.target_transforms.AutoSeasonalityAndDifferences object at 0x000002645CC41D30>, <mlforecast.target_transforms.LocalRobustScaler object at 0x000002645CC40350>), lags [1, 7, 15, 18, 173, 200, 335, 368, 369, 379], and lag_transforms {1: [CPUDispatcher(<function rolling_mean_14 at 0x0000026459DBF6A0>)]}...